cmake_minimum_required(VERSION 2.8.3)
project(open_tld_3d)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  cv_bridge
  geometry_msgs
  pcl
  pcl_ros
  roscpp
  rospy
  sensor_msgs
  std_msgs
  message_generation
  image_transport
)

find_package(PCL REQUIRED)

find_package(OpenCV REQUIRED)

include_directories(${PCL_INCLUDE_DIRS})

link_directories(${PCL_LIBRARY_DIRS})

include_directories(${OpenCV_INCLUDE_DIRS}
	include/open_tld_3d)

include_directories(
    src/opentld
    src/opentld/main
    src/libopentld/imacq
	src/libopentld/mftracker
	src/libopentld/tld
	src/libopentld/tld/detector
	src/libopentld/tld/detector/cuda
    src/3rdparty/cvblobs
    src/3rdparty/libconfig)

include_directories(src/libopentld/imacq
	src/libopentld/mftracker
	src/libopentld/tld
	src/libopentld/tld/detector
	src/libopentld/tld/detector/cuda
	src/libopentld/tld/detector/cuda/npp
	${CUDA_INCLUDE_DIRS})
	

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependencies might have been
##     pulled in transitively but can be declared for certainty nonetheless:
##     * add a build_depend tag for "message_generation"
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
 add_service_files(
   FILES
   AddTwoInts.srv
#   Service2.srv
 )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
 generate_messages(
   DEPENDENCIES
#   geometry_msgs
   std_msgs
 )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
  INCLUDE_DIRS include
  LIBRARIES open_tld_3d
  CATKIN_DEPENDS geometry_msgs roscpp rospy std_msgs pcl_ros pcl
  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
  ${catkin_INCLUDE_DIRS}
)

## Declare a cpp library
add_library(3dlib
	include/open_tld_3d/handler3D.cpp
	include/open_tld_3d/handler3D.hpp)

target_link_libraries(3dlib ${PCL_LIBRARIES})

add_library(3Dcvblobs
    src/3rdparty/cvblobs/blob.cpp
    src/3rdparty/cvblobs/BlobContour.cpp
    src/3rdparty/cvblobs/BlobOperators.cpp
    src/3rdparty/cvblobs/BlobProperties.cpp
    src/3rdparty/cvblobs/BlobResult.cpp
    src/3rdparty/cvblobs/ComponentLabeling.cpp
    src/3rdparty/cvblobs/blob.h
    src/3rdparty/cvblobs/BlobContour.h
    src/3rdparty/cvblobs/BlobLibraryConfiguration.h
    src/3rdparty/cvblobs/BlobOperators.h
    src/3rdparty/cvblobs/BlobProperties.h
    src/3rdparty/cvblobs/BlobResult.h
    src/3rdparty/cvblobs/ComponentLabeling.h)

add_library(3Dconfig++
    src/3rdparty/libconfig/grammar.c
    src/3rdparty/libconfig/libconfig.c
   src/3rdparty/libconfig/libconfigcpp.cc
    src/3rdparty/libconfig/scanctx.c
    src/3rdparty/libconfig/scanner.c
    src/3rdparty/libconfig/strbuf.c
    src/3rdparty/libconfig/grammar.h
    src/3rdparty/libconfig/libconfig.h
    src/3rdparty/libconfig/libconfig.hh
    src/3rdparty/libconfig/parsectx.h
    src/3rdparty/libconfig/scanctx.h
    src/3rdparty/libconfig/scanner.h
    src/3rdparty/libconfig/strbuf.h
    src/3rdparty/libconfig/wincompat.h)
	



add_library(3Dlibopentld
    src/libopentld/imacq/ImAcq.cpp
    src/libopentld/mftracker/BB.cpp
    src/libopentld/mftracker/BBPredict.cpp
    src/libopentld/mftracker/FBTrack.cpp
    src/libopentld/mftracker/Lk.cpp
    src/libopentld/mftracker/Median.cpp
    src/libopentld/tld/Clustering.cpp
    src/libopentld/tld/DetectionResult.cpp
    src/libopentld/tld/MedianFlowTracker.cpp
    src/libopentld/tld/TLD.cpp
    src/libopentld/tld/TLDUtil.cpp
    src/libopentld/tld/detector/DetectorCascade.cpp
    src/libopentld/tld/detector/EnsembleClassifier.cpp
    src/libopentld/tld/detector/ForegroundDetector.cpp
    src/libopentld/tld/detector/NNClassifier.cpp
    src/libopentld/tld/detector/VarianceFilter.cpp)

target_link_libraries(3Dlibopentld ${OpenCV_LIBS})


add_library(3Dmain
    src/opentld/main/Config.cpp
    src/opentld/main/Config.h
    src/opentld/main/Gui.cpp
    src/opentld/main/Gui.h
    src/opentld/main/Main.cpp
    src/opentld/main/Settings.cpp
	src/opentld/main/Trajectory.cpp
    src/opentld/main/Config.h
    src/opentld/main/Gui.h
    src/opentld/main/Main.h
	src/opentld/main/Settings.h
	src/opentld/main/Trajectory.h
	include/open_tld_3d/handler3D.hpp)
	

	
target_link_libraries(3Dmain 3Dlibopentld 3Dcvblobs 3Dconfig++ 3dlib ${PCL_LIBRARIES} ${OpenCV_LIBS})

#add_library(cuda
#    src/libopentld/tld/detector/cuda/CuDetectorCascade.cpp
#    src/libopentld/tld/detector/cuda/CuEnsembleClassifier.cpp
#    src/libopentld/tld/detector/cuda/CuVarianceFilter.cpp)

add_executable(OpenTLD3D src/opentld/OpenTLD3d.cpp)

target_link_libraries(OpenTLD3D 3Dmain 3Dcvblobs 3Dlibopentld 3Dconfig++ 3dlib ${OpenCV_LIBS} ${catkin_LIBRARIES} ${PCL_LIBRARIES})

add_executable(pcltrying src/3D/test.cpp)

target_link_libraries(pcltrying 3Dmain 3Dcvblobs 3Dlibopentld 3Dconfig++ ${OpenCV_LIBS} ${catkin_LIBRARIES} )
## Declare a cpp executable
# add_executable(open_ltd_ros_node src/opentld/OpenTLD.cpp)
# target_link_libraries(open_ltd_ros_node ${catkin_LIBRARIES} main tld imacq trajectory gui setting config clustering detectionresult medianflowtracker tldutil )
 
 
## Add cmake target dependencies of the executable/library
## as an example, message headers may need to be generated before nodes
# add_dependencies(open_ltd_ros_node open_ltd_ros_generate_messages_cpp)

## Specify libraries to link a library or executable target against
# target_link_libraries(open_ltd_ros_node
#   ${catkin_LIBRARIES}
# )

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS open_ltd_ros open_ltd_ros_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_open_ltd_ros.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)

