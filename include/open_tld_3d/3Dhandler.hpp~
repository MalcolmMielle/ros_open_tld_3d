#ifndef DHANDLER_HPP_
#define DHANDLER_HPP_
//openCV includes

#include "opencv2/core/core_c.h"
#include "opencv2/core/core.hpp"
#include "opencv2/highgui/highgui_c.h"
#include "opencv2/highgui/highgui.hpp"

#include "sensor_msgs/PointCloud2.h"
#include "pcl_ros/point_cloud.h"
// PCL specific includes
#include <pcl/ros/conversions.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>

class handler3D{
	protected : 
	
	
	public : 
	handler3D(){};
	
	void conversionFROMrosmsg(const sensor_msgs::PointCloud2ConstPtr& cloudy, cv::Mat& result, pcl::PointCloud<pcl::PointXYZRGBA>& cloud){
		pcl::fromROSMsg(*cloudy, cloud);	
		if (cloud.isOrganized()) {
			std::cout<<"Safe"<<std::endl;
		    result = cv::Mat(cloud.height, cloud.width, CV_8UC3);
		    
			  for (int h=0; h<result.rows; h++) {
				for (int w=0; w<result.cols; w++) {
				    pcl::PointXYZRGBA point = cloud.at(w, h);

				    Eigen::Vector3i rgb = point.getRGBVector3i();

				    result.at<cv::Vec3b>(h,w)[0] = rgb[2];
				    result.at<cv::Vec3b>(h,w)[1] = rgb[1];
				    result.at<cv::Vec3b>(h,w)[2] = rgb[0];
				}
			  }
		}
	}


};

/*
inline void handler3D::conversionFROMrosmsg(const sensor_msgs::PointCloud2ConstPtr& cloudy, cv::Mat& result, pcl::PointCloud<pcl::PointXYZRGBA>& cloud){

	pcl::fromROSMsg(*cloudy, cloud);	
	if (cloud.isOrganized()) {
		std::cout<<"Safe"<<std::endl;
	    result = cv::Mat(cloud.height, cloud.width, CV_8UC3);
	    
		  for (int h=0; h<result.rows; h++) {
		      for (int w=0; w<result.cols; w++) {
		          pcl::PointXYZRGBA point = cloud.at(w, h);

		          Eigen::Vector3i rgb = point.getRGBVector3i();

		          result.at<cv::Vec3b>(h,w)[0] = rgb[2];
		          result.at<cv::Vec3b>(h,w)[1] = rgb[1];
		          result.at<cv::Vec3b>(h,w)[2] = rgb[0];
		      }
		  }
	}
}*/


#endif
